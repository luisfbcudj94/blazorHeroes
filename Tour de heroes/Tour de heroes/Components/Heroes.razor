@using Tour_de_heroes.Models
@using Tour_de_heroes.IServices;
@inject IHeroService heroService;

<div class="container-heroes">
    @if (HeroesList == null || HeroesList.Count == 0)
    {
        <p>¡Cero héroes encontrados!</p>
    }
    else
    {
        @foreach (var hero in HeroesList)
        {
            <div class="card-hero">
                <span>@hero.Nombre</span>
                <img src="@hero.UrlFoto" />
                <button class="btn btn-danger" @onclick="() => DeleteHero(hero)">Eliminar</button>
            </div>
            
        }
    }

</div>

@code {

    [Parameter]
    public List<Hero> HeroesList { get; set;}

    [Parameter]
    public EventCallback<List<Hero>> HeroesListChanged { get; set; }

    //private async Task DeleteHero(Hero hero)
    //{
    //    await HeroesListChanged.InvokeAsync(HeroesList.Where(h => h != hero).ToList());
    //}

    public void DeleteHero(Hero hero)
    {
        heroService.DeleteHero(hero);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Console.WriteLine($"HeroesList count: {HeroesList.Count}");
    }
}
